local kinematic = require "ludobits.m.kinematic"

go.property("remote", true)
go.property("speed", 850)

local COLLISION_RESPONSE = hash("collision_response")
local WALL = hash("wall")

function init(self)
	if not self.remote then
		msg.post("/broadsock", "register_gameobject", { id = go.get_id(), type = "bullet" })
	end
	
	particlefx.play("#bulletfx")
	
	self.force_go = factory.create("/factories#force", vmath.vector3(0), vmath.quat(), {}, vmath.vector3(0.2))
	msg.post(self.force_go, "set_parent", {parent_id = go.get_id(), keep_world_transform = 0})
	
	local q = go.get_rotation()
	local angle = 2 * math.acos(q.w)
	local t = math.sqrt(1-q.w*q.w)
	if (t ~= 0) then
		z = q.z / t
		local r = z*angle
		local sprite_url = msg.url(nil, self.force_go, "sprite")
		sprite.set_constant(sprite_url, "rotation", vmath.vector4(r, 100, 0, 0))
	end
end

function final(self)
	if not self.remote then
		msg.post("/broadsock", "unregister_gameobject", { id = go.get_id() })
	end
	pcall(function()
		go.delete(self.force_go)
	end)
end

function update(self, dt)
	if not self.remote then
		kinematic.forward(self.speed * dt)
	end
end

function on_message(self, message_id, message, sender)
	if not self.remote then
		if message_id == COLLISION_RESPONSE then
			if message.group == WALL then
				go.delete()
			end
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
